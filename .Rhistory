GNcities(~north, ~east, ~south, ~west, maxRows = 500) %>%
ungroup %>%
head %>%
kable
.$north
north
with(france, GNcities(north, east, south, west, maxRows = 500) %>%
ungroup %>%
head %>%
kable
)
france = countryInfo %>%
filter(countryName == "France") %>%
france = countryInfo %>%
filter(countryName == "France")
with(france, GNcities(north, east, south, west, maxRows = 500) %>%
ungroup %>%
head %>%
kable
)
GNwikipediaSearch("London") %>%
select(-summary) %>%
head %>%
kable
francebirds <- countryInfo %>%
filter(countryName == "France") %>%
group_by(countryName) %>%
do(allbirds = ebirdregion(.$countryCode))  ## or perhaps fipsCode?
francebirds %>%
summarize(nbirds = nrow(allbirds)) %>%
ungroup %>%
kable
franceBirds
francebirds
nrow(allbirds)
francebirds
francebirds$allbirds
class(francebirds$allbirds)
class(francebirds$allbirds[1])
class(francebirds$allbirds[[1])
class(francebirds$allbirds[[1]])
install.packages("rplos")
library(rplos)
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
?reactive
runApp()
getwd()
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
library(shiny)
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
as.Date("2005")
?as.Date
as.year
Date("2005")
?strptime
as.Date("2005", "yyyy")
as.Date("2005", "%y%y%y%y")
as.Date("2005", "%Y%Y%Y%Y")
as.Date("2005", format="%Y%Y%Y%Y")
as.Date("2005", format="%Y")
as.Date("2005")
as.Date("2005", format="%y")
as.Date("2005", format="%Y")
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
as.Date("2005", format="%Y")
as.Date("2005", format="%Y-%m-%d")
format(as.Date("2005", format="%Y-%m-%d"), "%Y")
as.Date("2005", format="%Y-%m-%d")
format(as.Date("2005", format="%Y"), "%Y")
class(format(as.Date("2005", format="%Y"), "%Y"))
as.Date("2005", format="%Y")
class(as.Date("2005", format="%Y"))
a=as.Date("2005", format="%Y")
a
str(a)
names(a)
attributes(a)
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
?dateInput
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
cat(c("19120","123129"))
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
gDat
gDat <- read.delim(file = gdURL)
gdURL <- "http://tiny.cc/gapminder"
gDat <- read.delim(file = gdURL)
head(gDat)
cat(head(gDat))
cat(gDat[1,])
cat(c(gDat[1,]))
cat(unlist(gDat[1,]))
cat(names(gDat))
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
getwd()
?includeMarkdown
library(shiny)
?includeMarkdown
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
6*50
6*50*2
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/randomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/randomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/randomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/randomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
"https://raw.githubusercontent.com/kenlau177/cpsc547/master/Data/datTrn_small.txt"
urlTrain = "https://raw.githubusercontent.com/kenlau177/cpsc547/master/Data/datTrn_small.txt"
trainDat <- read.delim(file = urlTrain, sep=",")
getwd()
urlTrain = "https://raw.githubusercontent.com/kenlau177/cpsc547/master/Data/datTrn_small.txt"
trainDat <- read.table(file = urlTrain, sep=",", header=T)
?download.file
urlTrain = "https://raw.githubusercontent.com/kenlau177/cpsc547/master/Data/datTrn_small.txt"
trainDat <- download.file(urlTrain)
urlTrain = "C://Users//Ken//Desktop//School//MSC2_Fall//cpsc547//project//ShinyApp//RandomForestApp//datTrn_small.txt"
trainDat <- read.table(file = urlTrain, sep=",", header=T)
urlTrain = "C://Users//Ken//Desktop//School//MSC2_Fall//cpsc547//project//ShinyApp//RandomForestApp//datTrn_small.txt"
trainDat <- read.table(file = urlTrain, sep=",", header=T)
urlTrain = "C://Users//Ken//Desktop//School//MSC2_Fall//cpsc547//project//ShinyApp//RandomForestApp//datTrn_small.txt"
trainDat <- read.table(file = urlTrain, sep=",", header=T)
urlTrain = "C://Users//Ken//Desktop//School//MSC2_Fall//cpsc547//project//ShinyApp//RandomForestApp//datTrn_small.txt"
trainDat <- read.table(file = urlTrain, sep=",", header=T)
urlTrain
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
?includeHTML
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
?reactivePlot
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
plotType1 = "variable_importance"
switch(plotType1,
variable_importance={
print(1)
}, proximity={
renderPlot({
plotMDS(filteredRfObj())
})
}, partial_dependence={
renderPlot({
plotPartialDependence(filteredRfObj(), trainDat,
input$feature)
})
}
)
switch(plotType1,
variable_importance={
print(1)
}, proximity={
print(2)
}, partial_dependence={
renderPlot({
plotPartialDependence(filteredRfObj(), trainDat,
input$feature)
})
}
)
plotType1 = "v"
switch(plotType1,
variable_importance={
print(1)
}, proximity={
print(2)
}, partial_dependence={
renderPlot({
plotPartialDependence(filteredRfObj(), trainDat,
input$feature)
})
}
)
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/stat545/shinyApp/gapminderApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
urlTrain = "https://raw.githubusercontent.com/kenlau177/cpsc547/master/Data/datTrn_small.txt"
trainDat <- read.delim(file = urlTrain, sep=",")
trainDat$cl = factor(trainDat$cl)
row.names(trainDat) = 1:nrow(trainDat)
hashTable = c("1"="OOK", "2"="BPSK", "3"="OQPSK", "4"="BFSKA",
"5"="BFSKB", "6"="BFSKR2")
trainDat$cl = revalue(trainDat$cl, hashTable)
obj = randomForest(cl~., data=trainDat, proximity=T)
names(obj)
obj$err.rate
obj$y
obj$predicted == obj$y
rm(list=ls())
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
a = 20
a %% 5
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
?p
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
shiny::runApp('C:/Users/Ken/Desktop/School/MSC2_Fall/cpsc547/project/ShinyApp/RandomForestApp')
getwd()
setwd("C://Users//Ken//Documents//GitHub//MSC_Project")
inPath = "Data//Modulation"
sizeTrn = 50
sizeTest = 200
infsTrn = list.files(inPath, pattern=paste0("P", sizeTrn))
infsTrn
infsTest = list.files(inPath, pattern=paste0("P", sizeTest))
infsTest
library(plyr)
readData
colNames = read.table("Data//namesDat.txt", header=F)
colNames
colNames = read.table("Data//namesDat.txt", header=F)[,1]
colNames
colNames = read.table("Data//namesDat.txt", header=F,
stringsAsFactors=F)[,1]
colNames
datTrn$cl = factor(datTrn$cl)
readData = function(x, colNames){
out = read.table(x, header=F, sep=",", col.names=colNames)
}
datTrn = ldply(infsTrn, .fun=readData, colNames=colNames)
infsTrn
infsTrn = list.files(inPath, pattern=paste0("P", sizeTrn), full.names=T)
infsTrn
infsTest = list.files(inPath, pattern=paste0("P", sizeTest), full.names=T)
infsTest
datTrn = ldply(infsTrn, .fun=readData, colNames=colNames)
colNames = read.table("Data//namesDat.txt", header=F,
stringsAsFactors=F)[,1]
readData = function(x, colNames){
out = read.table(x, header=F, sep=",", col.names=colNames)
}
datTrn = ldply(infsTrn, .fun=readData, colNames=colNames)
?write.table
datTest = ldply(infsTest, .fun=readData, colNames=colNames)
write.table(datTrn, file="data//datTrn.txt", sep=",")
write.table(datTest, file="data//datTest.txt", sep=",")
CTree
k = c("k", "nok")
models = c("ClassTree", "RandomForest")
combnDf = expand.grid("k"=k, "model"=models)
combnDf
names(datTrn)
namesFeatures = names(datTrn)[-match("snrdB",names(datTrn))]
namesfeatures
namesFeatures
namesFeatures
namesFeatures = names(datTrn)[-match(c("snrdB","cl"),names(datTrn))]
namesFeatures
cTree.fitTrain = function(datTrn, datTest, namesFeatures){
fm = formula(paste0("cl~", paste(namesFeatures, collapse="+")))
fit = rpart(fm, data=datTrn, method="class", control=list("cp"=.005),
parms=list("split"="information"))
# check tree doesn't use cl or snrdb just in case
if(any(c("cl","snrdB") %in% names(fit$ordered))){
stop("TreeSimple fit used cl or snrdB")
}
cp = fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"]
fit = prune(fit, cp=cp)
return(fit)
}
cTree.predTest = function(datTest, fit){
if(length(fit) == 0){
stop("error in predTest for TreeSimple. fit is missing")
}
out = predict(fit, newdata=.Object@datTest, type=.Object@method)
return(out)
}
cTree.modelProcess = function(datTrn, datTest, namesFeatures){
fit = cTree.fitTrain(datTrn, datTest, namesFeatures)
pr = cTree.predTest(datTest, fit=fit)
resDf = cbind(datTest[,c("snrdB","cl")], pr)
}
fm = formula(paste0("cl~", paste(namesFeatures, collapse="+")))
fm
fit = rpart(fm, data=datTrn, method="class", control=list("cp"=.005),
parms=list("split"="information"))
library(rpart)
fit = rpart(fm, data=datTrn, method="class", control=list("cp"=.005),
parms=list("split"="information"))
if(any(c("cl","snrdB") %in% names(fit$ordered))){
stop("TreeSimple fit used cl or snrdB")
}
cp = fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"]
cp
fit = prune(fit, cp=cp)
cTree.fitTrain = function(datTrn, datTest, namesFeatures){
fm = formula(paste0("cl~", paste(namesFeatures, collapse="+")))
fit = rpart(fm, data=datTrn, method="class", control=list("cp"=.005),
parms=list("split"="information"))
# check tree doesn't use cl or snrdb just in case
if(any(c("cl","snrdB") %in% names(fit$ordered))){
stop("TreeSimple fit used cl or snrdB")
}
cp = fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"]
fit = prune(fit, cp=cp)
return(fit)
}
cTree.predTest = function(datTest, fit){
if(length(fit) == 0){
stop("error in predTest for TreeSimple. fit is missing")
}
out = predict(fit, newdata=.Object@datTest, type=.Object@method)
return(out)
}
fit
pr = cTree.predTest(datTest, fit=fit)
cTree.predTest = function(datTest, fit){
if(length(fit) == 0){
stop("error in predTest for TreeSimple. fit is missing")
}
out = predict(fit, newdata=datTest, type="class")
return(out)
}
pr = cTree.predTest(datTest, fit=fit)
dim(pr)
pr
resDf = cbind(datTest[,c("snrdB","cl")], pr)
dim(resDf)
head(resDf)
cTree.modelProcess = function(datTrn, datTest, namesFeatures){
fit = cTree.fitTrain(datTrn, datTest, namesFeatures)
pr = cTree.predTest(datTest, fit=fit)
resDf = cbind(datTest[,c("snrdB","cl")], pr)
}
rForest
library(randomForest)
models = c("cTree", "rForest")
combnDf = expand.grid("k"=k, "model"=models)
combnDf
rForest.predSel = function(datTrn, namesFeatures, params){
fm = formula(paste0("cl~", paste(namesFeatures, collapse="+")))
#handle the case where one or more response values are empty
#meaning it doesn't match what's expected of the factor
if(length(unique(datTrn$cl)) < length(levels(datTrn$cl))){
datTrn$cl = factor(datTrn$cl)
}
fit = randomForest(fm, datTrn, nTree=params$ntree, keep.forest=F)
importanceDf = data.frame(fit$importance)
importanceDf = importanceDf[order(importanceDf$MeanDecreaseGini,
decreasing=T),,drop=F]
out = row.names(importanceDf)[1:round(nrow(importanceDf)*(params$pSel))]
return(out)
}
rForest.fitTrain = function(datTrn, datTest, namesFeatures, params){
fm = formula(paste0("cl~", paste(namesFeatures, collapse="+")))
if(length(unique(datTrn$cl)) < length(levels(datTrn$cl))){
datTrn$cl = factor(datTrn$cl)
}
fit = randomForest(fm, datTrn, nTree=params$ntree, keep.forest=F)
return(fit)
}
rForest.predTest = function(datTest, fit){
if(length(fit) == 0){
stop("error in predTest for RandomForest. fit is missing")
}
out = predict(fit, newdata=datTest)
return(out)
}
params = list()
params$ntree = 850
if(length(namesFeatures) > 30){
params$pSel = .4
} else {
params$pSel = 1
}
params
namesFeatures = rForest.predSel(datTrn, namesFeatures, params)
fm
nTree
fit = randomForest(fm, datTrn, nTree=30, keep.forest=F)
fit
importanceDf = data.frame(fit$importance)
importanceDf
importanceDf = importanceDf[order(importanceDf$MeanDecreaseGini,
decreasing=T),,drop=F]
order(importanceDf$MeanDecreaseGini,
decreasing=T)
importanceDf$MeanDecreaseGini
names(fit)
fit$importance
head(datTrn)
a= datTrn$cl
head(a)
datTrn$cl = factor(datTrn$cl)
datTest$cl = factor(datTest$cl)
a= datTrn$cl
head(a)
fm = formula(paste0("cl~", paste(namesFeatures, collapse="+")))
if(length(unique(datTrn$cl)) < length(levels(datTrn$cl))){
datTrn$cl = factor(datTrn$cl)
}
fit = randomForest(fm, datTrn, nTree=20, keep.forest=F)
importanceDf = data.frame(fit$importance)
importanceDf = importanceDf[order(importanceDf$MeanDecreaseGini,
decreasing=T),,drop=F]
importanceDf
rForest.predSel = function(datTrn, namesFeatures, params){
fm = formula(paste0("cl~", paste(namesFeatures, collapse="+")))
#handle the case where one or more response values are empty
#meaning it doesn't match what's expected of the factor
if(length(unique(datTrn$cl)) < length(levels(datTrn$cl))){
datTrn$cl = factor(datTrn$cl)
}
fit = randomForest(fm, datTrn, nTree=400, keep.forest=F, nodesize=10)
importanceDf = data.frame(fit$importance)
importanceDf = importanceDf[order(importanceDf$MeanDecreaseGini,
decreasing=T),,drop=F]
out = row.names(importanceDf)[1:round(nrow(importanceDf)*(params$pSel))]
return(out)
}
namesFeatures = rForest.predSel(datTrn, namesFeatures, params)
namesFeatures
rForest.fitTrain = function(datTrn, datTest, namesFeatures, params){
fm = formula(paste0("cl~", paste(namesFeatures, collapse="+")))
if(length(unique(datTrn$cl)) < length(levels(datTrn$cl))){
datTrn$cl = factor(datTrn$cl)
}
fit = randomForest(fm, datTrn, nTree=params$ntree, keep.forest=F)
return(fit)
}
rForest.predTest = function(datTest, fit){
if(length(fit) == 0){
stop("error in predTest for RandomForest. fit is missing")
}
out = predict(fit, newdata=datTest)
return(out)
}
fit = rForest.fitTrain(datTrn, datTest, namesFeatures, params)
pr = rForest.predTest(datTest, fit=fit)
fit
rForest.fitTrain = function(datTrn, datTest, namesFeatures, params){
fm = formula(paste0("cl~", paste(namesFeatures, collapse="+")))
if(length(unique(datTrn$cl)) < length(levels(datTrn$cl))){
datTrn$cl = factor(datTrn$cl)
}
fit = randomForest(fm, datTrn, nTree=params$ntree)
return(fit)
}
fit = rForest.fitTrain(datTrn, datTest, namesFeatures, params)
pr = rForest.predTest(datTest, fit=fit)
resDf = cbind(datTest[,c("snrdB","cl")], pr)
head(resDf)
rm(list=ls())
setwd("C://Users//Ken//Documents//GitHub//MSC_Project")
library(rpart)
library(plyr)
library(randomForest)
source("code//Train//procedure.R")
source("code//Train//cTree.R")
source("code//Train//rForest.R")
datTrn = read.table("data//datTrn.txt", sep=",", header=T)
datTest = read.table("data//datTest.txt", sep=",", header=T)
datTrn$cl = factor(datTrn$cl)
datTest$cl = factor(datTest$cl)
procedure(k="nok", model="cTree", datTrn=datTrn, datTest=datTest)
k="nok"
model="cTree"
if(k == "k"){
# all features including m1,...,m5
namesFeatures = names(datTrn)[-match(c("snrdB","cl"),names(datTrn))]
} else {
# only m1,...,m5 features
namesFeatures = c("m1", "m2", "m3", "m4", "m5")
}
outf = "data//Fitted"
model
resDf = cTree.modelProcess(datTrn, datTest, namesFeatures)
outf = paste0(outf, "//cTree_k", k)
write.table(outf, resDf, sep=",")
head(resDf)
outf
outf = paste0(outf, "//cTree_", k, ".txt")
source("code//Train//procedure.R")
procedure(k="nok", model="cTree", datTrn=datTrn, datTest=datTest)
outf
outf = "data//Fitted"
outf = paste0(outf, "//cTree_", k, ".txt")
outf
write.table(outf, resDf, sep=",")
source("code//Train//procedure.R")
procedure(k="nok", model="cTree", datTrn=datTrn, datTest=datTest)
procedure(k="nok", model="rForest", datTrn=datTrn, datTest=datTest)
procedure(k="k", model="cTree", datTrn=datTrn, datTest=datTest)
procedure(k="k", model="rForest", datTrn=datTrn, datTest=datTest)
